@using CarHostingWeb.Models
@using CarHostingWeb.Services

@implements IDisposable

@inject CarService CarService

<div class="d-flex justify-content-end mr-5 mt-3">
    <SearchAndFilter OnFilterChanged="HandleFilterChanged"/>
</div>
    
<DisplayCarCards Cars="FilteredCars"/>

@if (AllCars is { Count: 0 })
{
    <div class="d-flex justify-content-center align-items-center">
        <h3>No cars at this moment!</h3>
    </div>
}
    
@code
{
    private List<Car>? AllCars { get; set; }
    private List<Car>? FilteredCars { get; set; }
    private string SearchTerm { get; set; } = string.Empty;
    
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
        CarService.CarsUpdated += OnCarsUpdated;
    }

    private async Task LoadCars()
    {
        if (_isLoading) return;
        _isLoading = true;
    
        try
        {
            AllCars = await CarService.GetAllCarsAsync();
            ApplyFilters();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async void OnCarsUpdated()
    {
        if (_isLoading) return; // Prevent concurrent updates
    
        await InvokeAsync(async () =>
        {
            await LoadCars();
        });
    }

    private void HandleFilterChanged(string searchTerm)
    {
        SearchTerm = searchTerm;
        ApplyFilters();
    }
    private void ApplyFilters()
    {
        if (AllCars == null) 
        {
            FilteredCars = null;
            return;
        }
        
        FilteredCars = AllCars.Where(car =>
            string.IsNullOrEmpty(SearchTerm) || 
            (car.Make?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
            (car.Model?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true)
        ).ToList();
    
        StateHasChanged();
    }

    public void Dispose()
    {
        CarService.CarsUpdated -= OnCarsUpdated;
    }

}
