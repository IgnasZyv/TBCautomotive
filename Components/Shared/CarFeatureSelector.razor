@rendermode InteractiveServer
@using CarHostingWeb.Models
@using CarHostingWeb.Services

@inject LocalizationService Localization

<!-- Features Section -->
<div class="mb-3">
    <label class="form-label">@Localization.GetString("CarFeatures")</label>

    <!-- Features Display Area - Full Width -->
    <div class="form-control bg-light"
         style="min-height: 60px; padding: 12px; border-bottom: none; border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
        @if (SelectedFeatures?.Any() == true)
        {
            <div class="d-flex flex-wrap gap-1">
                @if (ShowAllFeatures)
                {
                    @foreach (var feature in SelectedFeatures)
                    {
                        <span class="badge bg-primary">@Localization.GetLocalizedCarFeature(feature)</span>
                    }
                }
                else
                {
                    @foreach (var feature in SelectedFeatures.Take(3))
                    {
                        <span class="badge bg-primary">@Localization.GetLocalizedCarFeature(feature)</span>
                    }
                    @if (SelectedFeatures.Count > 3)
                    {
                        <span class="badge bg-secondary">+@(SelectedFeatures.Count - 3) more</span>
                    }
                }
            </div>
        }
        else
        {
            <span class="text-muted">@Localization.GetString("FormCarFeaturesPlaceholder")</span>
        }
    </div>

    <!-- Show All/Show Less Button -->
    @if (SelectedFeatures?.Count > 3)
    {
        <div class="border border-top-0 bg-light d-flex justify-content-center"
             style="padding: 4px; border-color: var(--bs-border-color); border-bottom-left-radius: 0.375rem; border-bottom-right-radius: 0.375rem;">
            @if (ShowAllFeatures)
            {
                <button type="button" class="btn btn-link p-0 text-decoration-none"
                        style="font-size: 0.7rem; color: var(--bs-secondary);"
                        @onclick="() => ShowAllFeatures = false">
                    <i class="bi bi-eye-slash me-1"></i>Show Less
                </button>
            }
            else
            {
                <button type="button" class="btn btn-link p-0 text-decoration-none"
                        style="font-size: 0.7rem; color: var(--bs-primary);"
                        @onclick="() => ShowAllFeatures = true">
                    <i class="bi bi-eye me-1"></i>Show All (@SelectedFeatures.Count)
                </button>
            }
        </div>
    }

    <div class="mb-2"></div>

    <!-- Select Features Button -->
    <div class="d-grid">
        <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal"
                data-bs-target="#featuresModal_@ComponentId">
            <i class="bi bi-pencil me-2"></i> @SelectButtonText
        </button>
    </div>
</div>

<!-- Features Selection Modal -->
<div class="modal fade" id="featuresModal_@ComponentId" tabindex="-1" aria-labelledby="featuresModalLabel_@ComponentId" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="featuresModalLabel_@ComponentId">
                    <i class="fas fa-car"></i> Select Car Features
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Search Bar -->
                <div class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" @bind="SearchTerm" @oninput="OnSearchChanged"
                               placeholder="Search features..."/>
                    </div>
                </div>

                <!-- Selected Count -->
                <div class="mb-3">
                    <div class="alert alert-info d-flex align-items-center">
                        <i class="fas fa-info-circle me-2"></i>
                        <span>@(SelectedFeatures?.Count ?? 0) features selected</span>
                        @if (SelectedFeatures?.Any() == true)
                        {
                            <button type="button" class="btn btn-sm btn-outline-danger ms-auto"
                                    @onclick="ClearAllFeatures">
                                <i class="fas fa-times"></i> Clear All
                            </button>
                        }
                    </div>
                </div>

                <!-- Features by Category -->
                <div class="row">
                    @foreach (var categoryGroup in GetFilteredGroupedFeatures())
                    {
                        <div class="col-12 mb-4">
                            <div class="card">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">
                                        <i class="fas @GetCategoryIcon(categoryGroup.Key) me-2"></i>
                                        @categoryGroup.Key
                                        <span class="badge bg-secondary ms-2">@categoryGroup.Value.Count</span>
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @foreach (var featureItem in categoryGroup.Value)
                                        {
                                            <div class="col-md-6 col-lg-4 mb-2">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           id="feature_@(ComponentId)_@(featureItem.Item1)"
                                                           checked="@(SelectedFeatures?.Contains(featureItem.Item1) == true)"
                                                           @onchange="@(e => ToggleFeature(featureItem.Item1, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="feature_@(ComponentId)_@(featureItem.Item1)">
                                                        @featureItem.Item2
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                    <i class="fas fa-check"></i> Done
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<CarFeature>? SelectedFeatures { get; set; } = new();
    [Parameter] public EventCallback<List<CarFeature>> SelectedFeaturesChanged { get; set; }
    [Parameter] public string SelectButtonText { get; set; } = "Select Features";
    
    private string ComponentId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    private string SearchTerm { get; set; } = string.Empty;
    private bool ShowAllFeatures { get; set; } = false;

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private Dictionary<string, List<(CarFeature Feature, string LocalizedName)>> GetFilteredGroupedFeatures()
    {
        var allGrouped = Localization.GetGroupedLocalizedFeatures();

        if (string.IsNullOrWhiteSpace(SearchTerm))
            return allGrouped;

        var filtered = new Dictionary<string, List<(CarFeature, string)>>();
        var searchLower = SearchTerm.ToLower();

        foreach (var category in allGrouped)
        {
            var matchingFeatures = category.Value
                .Where(f => f.Item2.ToLower().Contains(searchLower))
                .ToList();

            if (matchingFeatures.Any())
            {
                filtered[category.Key] = matchingFeatures;
            }
        }

        return filtered;
    }

    private async Task ToggleFeature(CarFeature feature, bool isSelected)
    {
        if (SelectedFeatures == null)
            SelectedFeatures = new List<CarFeature>();

        if (isSelected)
        {
            if (!SelectedFeatures.Contains(feature))
            {
                SelectedFeatures.Add(feature);
            }
        }
        else
        {
            SelectedFeatures.Remove(feature);
        }

        await SelectedFeaturesChanged.InvokeAsync(SelectedFeatures);
        StateHasChanged();
    }

    private async Task ClearAllFeatures()
    {
        if (SelectedFeatures != null)
        {
            SelectedFeatures.Clear();
            await SelectedFeaturesChanged.InvokeAsync(SelectedFeatures);
            StateHasChanged();
        }
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            var c when c.Contains("Safety") || c.Contains("Seguridad") => "fa-shield-alt",
            var c when c.Contains("Comfort") || c.Contains("Comodidad") => "fa-couch",
            var c when c.Contains("Technology") || c.Contains("Tecnología") => "fa-microchip",
            var c when c.Contains("Audio") || c.Contains("Entertainment") => "fa-music",
            var c when c.Contains("Exterior") => "fa-car-side",
            var c when c.Contains("Performance") || c.Contains("Rendimiento") => "fa-tachometer-alt",
            var c when c.Contains("Seating") || c.Contains("Asientos") => "fa-chair",
            _ => "fa-cog"
        };
    }
}