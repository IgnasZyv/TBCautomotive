@using CarHostingWeb.Models
@using CarHostingWeb.Services

@rendermode InteractiveServer
@namespace CarHostingWeb.Components.Shared

@inject LocalizationService Localization
@inject ImageUploadService ImageUploadService
@inject CarService CarService
@inject IJSRuntime JsRuntime

<div class="car-image-gallery col-md-6">
    <div class="card mb-3 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Car Images</h5>
        </div>

<div class="card-body p-0 position-relative">
    @if (!string.IsNullOrEmpty(Car.ImagePath))
    {
        <!-- Existing primary image from database -->
        <div class="image-container">
            <img src="@Car.ImagePath" class="w-100 h-100 object-fit-cover" alt="Main Car Image" @onclick="() => ShowImageModal(Car.ImagePath)"/>
        </div>
    }
    else if (_primaryImageSource == "temp" && _primaryImageIndex >= 0 && _primaryImageIndex < TemporaryFiles.Count)
    {
        <!-- Temporary image selected as primary -->
        <div class="image-container">
            <img src="@TemporaryFiles[_primaryImageIndex].DataUrl" 
                 class="w-100 h-100 object-fit-cover primary-temp-image" 
                 alt="Selected Primary Image" 
                 @onclick="() => ShowImageModal(TemporaryFiles[_primaryImageIndex].DataUrl)"/>
            
            <!-- Primary indicator overlay -->
            <div class="primary-indicator">
                <span class="badge bg-warning text-dark">
                    <i class="bi bi-star-fill me-1"></i>Selected as Primary
                </span>
            </div>
            
            @if (IsEditable)
            {
                <!-- Clear primary selection button -->
                <div class="clear-primary-btn">
                    <button type="button" class="btn btn-outline-light btn-sm" 
                            @onclick:stopPropagation="true"
                            @onclick="ClearPrimarySelection"
                            title="Clear primary selection">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <!-- No primary image set -->
        @if (!IsEditable)
        {
            <div class="text-center p-5">
                <i class="bi bi-image display-4 text-muted"></i>
                <p class="text-muted mt-2">No image available</p>
            </div>
        }
        else
        {
            <div class="text-center p-5 image-container d-flex flex-column justify-content-center align-items-center">
                <img src="assets/Icons/add-image-icon.svg" alt="Add Image Icon" height="80" width="80"/>
                @if (TemporaryFiles.Any() || (Car.SubImages?.Any() == true))
                {
                    <p class="text-muted mt-2">Select a primary image below</p>
                    <small class="text-muted">Click the star icon on any image to make it primary</small>
                }
                else
                {
                    <p class="text-muted mt-2">Add images to get started</p>
                    <small class="text-muted">Upload images using the "Add Images" button below</small>
                }
            </div>
        }
    }
</div>
        
        <div class="card-footer">
            @if (Car.SubImages?.Any() == true)
            {
                @for (var i = 0; i < Car.SubImages.Count; i++)
                {
                    var imageIndex = i; // Capture for closure
                    <div class="sub-image-container position-relative">
                        <div class="sub-image-box rounded-2 shadow-sm" @onclick="() => ShowImageModal(Car.SubImages[imageIndex])">
                            <img src="@Car.SubImages[imageIndex]" alt="sub image" class="sub-image-box-image rounded-2"/>
                            
                            <!-- Primary button -->
                            @if (IsEditable)
                            {
                                <button type="button" class="btn btn-primary btn-sm make-primary-btn" 
                                        title="Make Primary Image"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => MakeImagePrimary(imageIndex)">
                                    <i class="bi bi-star"></i>
                                </button>
                            }
                        </div>
                        @if (IsEditable)
                        {
                            <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1" 
                                    style="border-radius: 50%; width: 25px; height: 25px; padding: 0;"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => RemoveUploadedImage(imageIndex)">
                                ×
                            </button>
                        }
                    </div>
                }
            }

            @if (TemporaryFiles?.Any() == true)
            {
                @for (var i = 0; i < TemporaryFiles.Count; i++)
                {
                    var imageIndex = i; // Capture for closure
                    <div class="sub-image-container position-relative temp-image">
                        <div class="sub-image-box rounded-2 shadow-sm" @onclick="() => ShowImageModal(TemporaryFiles[imageIndex].DataUrl)">
                            <img src="@TemporaryFiles[imageIndex].DataUrl" alt="sub image" class="sub-image-box-image rounded-2"/>
                            
                            <!-- Primary button -->
                            @if (IsEditable)
                            {
                                <button type="button" class="btn btn-primary btn-sm make-primary-btn" 
                                        title="Make Primary Image"
                                        @onclick:stopPropagation="true"
                                        @onclick="@(() => MakePrimary("temp", imageIndex))">
                                    <i class="bi bi-star"></i>
                                </button>
                            }
                        </div>
                        @if (IsEditable)
                        {
                            <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1"
                                    style="border-radius: 50%; width: 25px; height: 25px; padding: 0;"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => RemoveTemporaryImage(imageIndex)">
                                ×
                            </button>
                        }
                    </div>
                }
            }

            @if (IsEditable)
            {
                <label class="sub-image-box rounded-2 shadow-sm d-flex flex-wrap justify-content-center"
                       style="cursor: pointer;">
                    <img src="assets/Icons/add-image-icon.svg" alt="Add Image Icon" height="40" width="40"/>
                    <span class="text-muted">Add Images</span>
                    <InputFile OnChange="OnFilesSelected"
                               multiple
                               accept="image/*"
                               style="display: none;"/>
                </label>
            }
            
        </div>
        
        @if (_containsUnuploaded || _isUploading)
        {
            <div class="d-flex justify-content-center m-2">
                <button type="button" class="btn btn-success text-white" @onclick="UploadTemporaryImages" disabled="@_isUploading">
                    @if (_isUploading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <text>Confirm</text>
                    }
                </button>
            </div>

            @if (_isUploading)
            {
                <div class="d-flex justify-content-center m-2">
                    <div class="progress" style="width: 200px; height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" 
                             role="progressbar" 
                             style="width: 100%">
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Bootstrap Modal for Full Image -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content bg-transparent border-0">
            <div class="modal-body text-center p-0 position-relative">
                @if (!string.IsNullOrEmpty(_selectedImage))
                {
                    <div class="position-relative d-inline-block">
                        <img src="@_selectedImage" class="img-fluid rounded" alt="Full size image" style="max-height: 90vh; max-width: 100%;" />
                        
                        <!-- Close button overlaid on image -->
                        <button type="button" 
                                class="custom-close-btn position-absolute" 
                                data-bs-dismiss="modal" 
                                aria-label="Close">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    
                    <!-- Navigation arrows (if you're using them) -->
                    @if (Car.SubImages?.Count > 1)
                    {
                        <button class="btn btn-outline-light position-absolute start-0 top-50 translate-middle-y ms-3"
                                @onclick="PreviousImage"
                                disabled="@(_currentImageIndex == 0)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        
                        <button class="btn btn-outline-light position-absolute end-0 top-50 translate-middle-y me-3"
                                @onclick="NextImage"
                                disabled="@(_currentImageIndex == Car.SubImages.Count - 1)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this image?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" data-bs-dismiss="modal">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public required Car Car { get; set; }
    [Parameter] public bool IsEditable { get; set; }
    
    private const int MaxFileSize = 10 * 1024 * 1024;

    private List<TempImage> TemporaryFiles { get; set; } = new();
    private TempImage TempPrimaryImage { get; set; }
    
    private bool _containsUnuploaded;
    private string? _selectedImage;
    private int _currentImageIndex = 0;
    private int _imageToDeleteIndex = -1;

    private bool _isUploading;
    
    // Add these properties to track primary image
    private string? _primaryImageSource; // "temp" or "sub" 
    private int _primaryImageIndex = -1;
    private bool _hasPrimaryImageChanged = false;

// Helper property to check if we have a designated primary
    private bool HasDesignatedPrimary => _primaryImageSource != null && _primaryImageIndex >= 0;
    
    private void ClearPrimarySelection()
    {
        _primaryImageSource = null;
        _primaryImageIndex = -1;
        _hasPrimaryImageChanged = false;
        StateHasChanged();
    }
    
    private async Task MakePrimary(string source, int index)
    {
        Console.WriteLine($"MakePrimary called: source={source}, index={index}");
        Console.WriteLine($"Car.Id before: {Car.Id}");
    
        // Only mark for temp images - don't update database yet
        if (source == "temp")
        {
            _primaryImageSource = source;
            _primaryImageIndex = index;
            _hasPrimaryImageChanged = true;
        
            Console.WriteLine($"Primary image marked: {_primaryImageSource}[{_primaryImageIndex}]");
            Console.WriteLine($"Car.Id after: {Car.Id}");
        
            StateHasChanged();
        }
    }

    private async Task MakeImagePrimary(int index)
    {
        if (!(Car.SubImages != null && index >= 0 && index < Car.SubImages.Count)) return;
        
        var newPrimaryImage = Car.SubImages[index];

        if (!string.IsNullOrEmpty(Car.ImagePath) && !Car.SubImages.Contains(Car.ImagePath))
        {
            Car.SubImages.Insert(index, Car.ImagePath);
        }

        Car.ImagePath = newPrimaryImage;

        Car.SubImages.Remove(newPrimaryImage);

        if (Car.Id != null)
        {
            await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);
        }
        
        StateHasChanged();
    }
    
    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
    
        foreach (var file in files)
        {
            if (file.ContentType.StartsWith("image/"))
            {
                try
                {
                    // Read file content and convert to data URL
                    await using var stream = file.OpenReadStream(MaxFileSize);
                    using var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                
                    var fileBytes = memoryStream.ToArray();
                    var base64String = Convert.ToBase64String(fileBytes);
                    var dataUrl = $"data:{file.ContentType};base64,{base64String}";

                    // Add to SubImages list for immediate display
                    var tempImage = new TempImage(imageDataUrl: dataUrl, imageFile: file);
                    TemporaryFiles.Add(tempImage);
                    
                    _containsUnuploaded = true;
                }
                catch (Exception ex)
                {
                    // Handle error (file too large, etc.)
                    Console.WriteLine($@"Error processing file {file.Name}: {ex.Message}");
                    // You might want to show a toast notification or error message to user
                }
            }
        }
    
        // Refresh the UI to show new images
        StateHasChanged();
    }

    // private async Task UploadTemporaryImages()
    // {
    //     if (!TemporaryFiles.Any()) return;
    //
    //     _isUploading = true;
    //     StateHasChanged();
    //
    //     try
    //     {
    //         var filesToUpload = TemporaryFiles.Select(t => t.File);
    //
    //         var uploadedUrls = await ImageUploadService.UploadImagesAsync(filesToUpload);
    //
    //         Car.SubImages ??= [];
    //         Car.SubImages.AddRange(uploadedUrls);
    //
    //         if (Car.Id != null) await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);
    //
    //         // Clear temp images
    //         TemporaryFiles.Clear();
    //         _containsUnuploaded = false;
    //
    //         StateHasChanged();
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine($@"Error uploading images: {e.Message}");
    //     }
    //     finally
    //     {
    //         _isUploading = false;
    //         StateHasChanged();
    //     }
    // }
    
    private async Task UploadTemporaryImages()
{
    if (!TemporaryFiles.Any()) return;

    _isUploading = true;
    StateHasChanged();

    try
    {
        var filesToUpload = TemporaryFiles.Select(t => t.File);
        var uploadedUrls = await ImageUploadService.UploadImagesAsync(filesToUpload);

        if (uploadedUrls.Any())
        {
            Car.SubImages ??= [];
            
            // If a temp image was marked as primary, make it the car's primary image
            if (_primaryImageSource == "temp" && _primaryImageIndex >= 0 && _primaryImageIndex < uploadedUrls.Count)
            {
                var primaryUrl = uploadedUrls[_primaryImageIndex];
                
                // Move current primary image to sub images if it exists
                if (!string.IsNullOrEmpty(Car.ImagePath))
                {
                    Car.SubImages.Add(Car.ImagePath);
                }
                
                // Set new primary
                Car.ImagePath = primaryUrl;
                
                // Add other uploaded images to sub images (excluding the new primary)
                var otherUrls = uploadedUrls.Where((url, i) => i != _primaryImageIndex).ToList();
                Car.SubImages.AddRange(otherUrls);
            }
            else
            {
                // No primary selected from temps, just add all to sub images
                Car.SubImages.AddRange(uploadedUrls);
            }

            if (Car.Id != null) 
                await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);

            // Clear temp data
            TemporaryFiles.Clear();
            _containsUnuploaded = false;
            _primaryImageSource = null;
            _primaryImageIndex = -1;
            _hasPrimaryImageChanged = false;
        }

        StateHasChanged();
    }
    catch (Exception e)
    {
        Console.WriteLine($@"Error uploading images: {e.Message}");
    }
    finally
    {
        _isUploading = false;
        StateHasChanged();
    }
}
    
    // private void RemoveTemporaryImage(int index)
    // {
    //     if (index >= 0 && index < TemporaryFiles.Count)
    //     {
    //         TemporaryFiles.RemoveAt(index);
    //         
    //         if (TemporaryFiles.Count == 0)
    //         {
    //             _containsUnuploaded = false;
    //         }
    //         
    //         StateHasChanged();
    //     }
    // }
    
    private void RemoveTemporaryImage(int index)
    {
        if (index >= 0 && index < TemporaryFiles.Count)
        {
            // If removing the primary temp image, clear primary designation
            if (_primaryImageSource == "temp" && _primaryImageIndex == index)
            {
                _primaryImageSource = null;
                _primaryImageIndex = -1;
                _hasPrimaryImageChanged = false;
            }
            // If removing an image before the primary, adjust the primary index
            else if (_primaryImageSource == "temp" && _primaryImageIndex > index)
            {
                _primaryImageIndex--;
            }
        
            TemporaryFiles.RemoveAt(index);
        
            if (TemporaryFiles.Count == 0)
            {
                _containsUnuploaded = false;
            }
        
            StateHasChanged();
        }
    }
    
    private async Task RemoveUploadedImage(int index)
    {
        _imageToDeleteIndex = index;
        await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show()");
    }

    private async Task ConfirmDelete()
    {
        if (_imageToDeleteIndex >= 0 && Car.SubImages != null && _imageToDeleteIndex < Car.SubImages.Count)
        {
            var imageUrl = Car.SubImages[_imageToDeleteIndex];
        
            // Delete from Cloudinary
            var deleted = await ImageUploadService.DeleteImageAsync(imageUrl);
        
            if (deleted)
            {
                Car.SubImages.RemoveAt(_imageToDeleteIndex);
            
                if (Car.Id != null)
                {
                    await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);
                }
            
                StateHasChanged();
            }
            else
            {
                Console.WriteLine(@"Failed to delete image from Cloudinary");
            }
        }
    
        _imageToDeleteIndex = -1; // Reset
    }

    private async Task ShowImageModal(string imageUrl)
    {
        _selectedImage = imageUrl;

        // Show the modal using Bootstrap's JavaScript API
        await JsRuntime.InvokeVoidAsync("eval",
            "new bootstrap.Modal(document.getElementById('imageModal')).show()");
    }
    
    private void NextImage()
    {
        if (Car.SubImages?.Any() == true && _currentImageIndex < Car.SubImages.Count - 1)
        {
            _currentImageIndex++;
            _selectedImage = Car.SubImages[_currentImageIndex];
            
            Console.WriteLine(_selectedImage);
        }
    }

    private void PreviousImage()
    {
        if (Car.SubImages?.Any() == true && _currentImageIndex > 0)
        {
            _currentImageIndex--;
            _selectedImage = Car.SubImages[_currentImageIndex];
            
            Console.WriteLine(_selectedImage);
        }
    }
}