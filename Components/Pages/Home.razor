@rendermode InteractiveServer
@page "/"
@using CarHostingWeb.Services
@using CarHostingWeb.Models
@using CarHostingWeb.Components.Shared

@inject LocalizationService Localization
@inject CarService CarService

<PageTitle>Car hosting</PageTitle>

<section class="hero" style="margin-left: -2rem; margin-right: -1.5rem;">
    <div class="hero-container pt-5">
        <div class="hero-text d-flex flex-column justify-content-center align-content-center">
            <img src="assets/Logo/Logo.webp" 
                 alt="TBC Automotive Logo" 
                 class="hero-logo rounded-2 shadow-sm fade-in-left" />

            <h1 class="hero-title fade-in-up">
                Servicio Integral de <span class="highlight">Automoción</span>
            </h1>
            <p class="hero-subtitle fade-in-up">
                Confianza, calidad y compromiso en cada vehículo.
            </p>
                
            <div class="d-flex flex-row justify-content-center align-content-center text-center cta-buttons fade-in-up">
                <a href="#listing-section" class="btn btn-primary m-2">
                    Cars In Stock
                </a>
                <a href="#contact-section" class="btn btn-secondary m-2">
                    Contact Us!
                </a>
            </div>
        </div>

        <div class="hero-image fade-in-right">
            <img src="assets/HeroSection/HeroCarIllustration.svg" 
                 alt="Car illustration" />
        </div>
    </div>
</section>

<section class="mt-3 listing-section" id="listing-section">
    <SectionHeader LocalizationString="ListingHeader" IconClassString="bi bi-car-front-fill me-1 text-primary" IsTop="@false"/>
    
    <DisplayCars />
</section>

<section class="contact-section" id="contact-section">
    <SectionHeader LocalizationString="ContactUs" IconClassString="bi bi-envelope me-1 text-primary" IsTop="@false"/>
</section>


@* @code *@
@* { *@
@*     private List<Car>? AllCars { get; set; } *@
@*     private List<Car>? FilteredCars { get; set; } *@
@*     private string SearchTerm { get; set; } = string.Empty; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         AllCars = await CarService.GetAllCarsAsync(); *@
@*         FilteredCars = AllCars; *@
@*     } *@
@* *@
@*     private void HandleFilterChanged(string searchTerm) *@
@*     { *@
@*         SearchTerm = searchTerm; *@
@*         ApplyFilters(); *@
@*     } *@
@* *@
@*     private void ApplyFilters() *@
@*     { *@
@*         if (AllCars == null) return; *@
@* *@
@*         FilteredCars = AllCars.Where(car => *@
@*             car is { Make: not null, Model: not null } && *@
@*             ( *@
@*                 string.IsNullOrEmpty(SearchTerm) ||  *@
@*                 car.Make.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) || *@
@*                 car.Model.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) *@
@*             ) *@
@*         ).ToList(); *@
@*          *@
@*         StateHasChanged(); *@
@*     } *@

}
