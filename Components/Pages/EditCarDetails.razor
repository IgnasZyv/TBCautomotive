@page "/admin/edit/{CarId}"

@rendermode InteractiveServer
@using CarHostingWeb.Models
@using CarHostingWeb.Services
@using CarHostingWeb.Components.Shared

@inject CarService CarService
@inject ImageUploadService ImageUploadService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject LocalizationService Localization

<SectionHeader LocalizationString="HeaderEditCarDetails" IconClassString="bi bi-pen me-1 text-primary" IsTop="@true"/>

@if (_isLoading)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (_car == null)
{
    <div class="container mt-4">
        <div class="alert alert-danger">
            <h4>Car Not Found</h4>
            <p>The car you're looking for doesn't exist.</p>
            <button class="btn btn-primary" @onclick="GoBack">
                Back to Admin
            </button>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h2">Edit Car Details</h1>
            <div>
                <button class="btn btn-outline-secondary me-2" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i> @Localization.GetString("FormCancel")
                </button>
                <button class="btn btn-danger me-2" @onclick="DeleteCar" disabled="@_isDeleting">
                    @if (_isDeleting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-trash"></i> Delete
                </button>
                <button class="btn btn-success" @onclick="SaveChanges" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-check"></i> @Localization.GetString("FormSaveChanges")
                </button>
            </div>
        </div>

        <!-- Success/Error Messages -->
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @_successMessage
                <button type="button" class="btn-close" @onclick="() => _successMessage = string.Empty"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @_errorMessage
                <button type="button" class="btn-close" @onclick="() => _errorMessage = string.Empty"></button>
            </div>
        }

        <div class="row d-flex justify-content-center">
            <!-- Image Section -->
            <CarImageGallery Car="_car" IsEditable="@true"/>

            <!-- Details Section -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">@Localization.GetString("FormCarDetails")</h5>
                    </div>
                    <div class="card-body">
                        <!-- Basic Information -->
                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarMake") <span class="text-danger">*</span></label>
                            <input type="text" class="form-control @(_validationErrors.ContainsKey("Make") ? "is-invalid" : "")" 
                                   @bind="_car.Make" placeholder="Enter car make" />
                            @if (_validationErrors.ContainsKey("Make"))
                            {
                                <div class="invalid-feedback">@_validationErrors["Make"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarModel") <span class="text-danger">*</span></label>
                            <input type="text" class="form-control @(_validationErrors.ContainsKey("Model") ? "is-invalid" : "")" 
                                   @bind="_car.Model" placeholder="Enter car model" />
                            @if (_validationErrors.ContainsKey("Model"))
                            {
                                <div class="invalid-feedback">@_validationErrors["Model"]</div>
                            }
                        </div>
    
                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarYear") <span class="text-danger">*</span></label>
                            <input type="number" class="form-control @(_validationErrors.ContainsKey("Year") ? "is-invalid" : "")" 
                                   @bind="_car.Year" min="1900" max="@DateTime.Now.Year" placeholder="Enter year" />
                            @if (_validationErrors.ContainsKey("Year"))
                            {
                                <div class="invalid-feedback">@_validationErrors["Year"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarPrice") <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">€</span>
                                <input type="number" class="form-control @(_validationErrors.ContainsKey("Price") ? "is-invalid" : "")" 
                                       @bind="_car.Price" min="0" step="0.01" placeholder="0.00" />
                                @if (_validationErrors.ContainsKey("Price"))
                                {
                                    <div class="invalid-feedback">@_validationErrors["Price"]</div>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarKm")</label>
                            <input type="number" class="form-control" @bind="_car.Kilometres" 
                                   min="0" placeholder="Kilometres" />
                        </div>

                        <!-- Vehicle Condition -->
                        <div class="mb-3">
                            <label class="form-label">Condition</label>
                            <select class="form-select" @bind="_car.Condition">
                                <option value="">Select Condition</option>
                                @foreach (var condition in Enum.GetValues<VehicleCondition>())
                                {
                                    <option value="@condition">@GetConditionDisplayName(condition)</option>
                                }
                            </select>
                        </div>

                        <!-- Fuel Type -->
                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarFuelType")</label>
                            <select class="form-select" @bind="_car.FuelType">
                                <option value="">@Localization.GetString("FormSelectFuelType")</option>
                                @foreach (var fuelType in Enum.GetValues<FuelType>())
                                {
                                    <option value="@fuelType">@GetFuelTypeDisplayName(fuelType)</option>
                                }
                            </select>
                        </div>

                        <!-- Transmission -->
                        <div class="mb-3">
                            <label class="form-label">Transmission</label>
                            <select class="form-select" @bind="_car.Transmission">
                                <option value="">Select Transmission</option>
                                @foreach (var transmission in Enum.GetValues<TransmissionType>())
                                {
                                    <option value="@transmission">@GetTransmissionDisplayName(transmission)</option>
                                }
                            </select>
                        </div>

                        <!-- Engine Details -->
                        <div class="row mb-3">
                            <div class="col-6">
                                <label class="form-label">Engine Size</label>
                                <input type="text" class="form-control" @bind="_car.EngineSize" 
                                       placeholder="e.g., 2.0L, 3.5L V6" />
                            </div>
                            <div class="col-6">
                                <label class="form-label">Cylinders</label>
                                <input type="number" class="form-control" @bind="_car.EngineCylinders" 
                                       min="1" max="16" placeholder="e.g., 4, 6, 8" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Horsepower</label>
                            <input type="number" class="form-control" @bind="_car.Horsepower" 
                                   min="0" placeholder="Engine power in HP" />
                        </div>

                        <!-- Features -->
                        <div class="mb-3">
                            <label class="form-label">Features</label>
                            <textarea class="form-control" rows="3" @bind="_featuresText" 
                                      placeholder="Enter features separated by commas (e.g., Leather Seats, Sunroof, GPS Navigation)"></textarea>
                            <small class="form-text text-muted">Separate multiple features with commas</small>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label class="form-label">@Localization.GetString("CarDescription")</label>
                            <textarea class="form-control" rows="4" @bind="_car.Description" 
                                      placeholder="Enter car description (optional)"></textarea>
                        </div>

                        <div class="mb-3">
                            <small class="text-muted">
                                <strong>Created:</strong> @_car.CreatedAt.ToDateTime().ToString("MMMM dd, yyyy")
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirmation Modal -->
<div class="modal fade" id="deleteCarConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Car Listing</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this car listing?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" data-bs-dismiss="modal">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string CarId { get; set; } = string.Empty;

    private Car? _car;
    private string _featuresText = "";
    
    private bool _isLoading = true;
    private bool _isSaving = false;
    private bool _isDeleting;
    
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;
    private Dictionary<string, string> _validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(CarId))
            {
                _car = await CarService.GetCarByIdAsync(CarId);
                
                // Initialize features text from existing data
                if (_car?.Features?.Any() == true)
                {
                    _featuresText = string.Join(", ", _car.Features);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($@"Error loading car: {ex.Message}");
            _car = null;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task DeleteCar()
    {
        await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteCarConfirmModal')).show()");
    }

    private async Task ConfirmDelete()
    {
        if (_car == null) return;

        try
        {
            _isDeleting = true;

            var allImageUrls = new List<string>();

            if (!string.IsNullOrEmpty(_car.ImagePath))
            {
                allImageUrls.Add(_car.ImagePath); // add primary image url if exists
            }
            if (_car.SubImages?.Any() == true)
            {
                allImageUrls.AddRange(_car.SubImages); // add sub image urls if they exist
            }

            var imagesDeleted = await ImageUploadService.DeleteMultipleImagesAsync(allImageUrls);

            if (imagesDeleted && !string.IsNullOrEmpty(_car.Id))
            {
                await CarService.DeleteCarAsync(_car.Id);
                _isDeleting = false;
                NavigationManager.NavigateTo("/admin");

                return;
            }

            _isDeleting = false;
            _errorMessage = "Failed to delete the car.";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private bool ValidateForm()
    {
        _validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(_car?.Make))
            _validationErrors["Make"] = $"{Localization.GetString("FormValidationMake")}";

        if (string.IsNullOrWhiteSpace(_car?.Model))
            _validationErrors["Model"] = $"{Localization.GetString("FormValidationModel")}";

        if (_car?.Year < 1900 || _car?.Year > DateTime.Now.Year)
            _validationErrors["Year"] = $"{Localization.GetString("FormValidationYear")} {DateTime.Now.Year}";

        if (_car?.Price <= 0)
            _validationErrors["Price"] = $"{Localization.GetString("FormValidationPrice")}";

        return _validationErrors.Count == 0;
    }

    private async Task SaveChanges()
    {
        if (_car == null) return;

        if (!ValidateForm())
        {
            _errorMessage = $"{Localization.GetString("FormValidationErrorMessage")}";
            return;
        }

        _isSaving = true;
        _errorMessage = string.Empty;
        _successMessage = string.Empty;

        try
        {
            // Parse features from comma-separated text
            if (!string.IsNullOrWhiteSpace(_featuresText))
            {
                _car.Features = _featuresText
                    .Split(',')
                    .Select(f => f.Trim())
                    .Where(f => !string.IsNullOrEmpty(f))
                    .ToList();
            }
            else
            {
                _car.Features = null;
            }

            await CarService.UpdateCarAsync(CarId, _car);

            _successMessage = $"{Localization.GetString("FormCarUpdateMessage")}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"{Localization.GetString("FormCarUpdateErrorMessage")} {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin");
    }

    // Helper methods for display names
    private string GetConditionDisplayName(VehicleCondition condition)
    {
        return condition switch
        {
            VehicleCondition.New => "New",
            VehicleCondition.Used => "Used",
            VehicleCondition.CertifiedPreOwned => "Certified Pre-Owned",
            _ => condition.ToString()
        };
    }

    private string GetFuelTypeDisplayName(FuelType fuelType)
    {
        return fuelType switch
        {
            FuelType.Petrol => "Petrol",
            FuelType.Diesel => "Diesel",
            FuelType.Electric => "Electric",
            FuelType.Hybrid => "Hybrid",
            FuelType.PlugInHybrid => "Plug-in Hybrid",
            FuelType.LPG => "LPG",
            FuelType.CNG => "CNG",
            _ => fuelType.ToString()
        };
    }

    private string GetTransmissionDisplayName(TransmissionType transmission)
    {
        return transmission switch
        {
            TransmissionType.Manual => "Manual",
            TransmissionType.Automatic => "Automatic",
            TransmissionType.CVT => "CVT",
            TransmissionType.SemiAutomatic => "Semi-Automatic",
            _ => transmission.ToString()
        };
    }
}