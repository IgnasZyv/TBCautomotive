@using CarHostingWeb.Models
@using CarHostingWeb.Services

@rendermode InteractiveServer
@namespace CarHostingWeb.Components.Shared

@inject LocalizationService Localization
@inject ImageUploadService ImageUploadService
@inject CarService CarService
@inject IJSRuntime JsRuntime

<div class="car-image-gallery col-md-6">
    <div class="card mb-3 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Car Images</h5>
        </div>

        <div class="card-body p-0 position-relative">
            @if (!string.IsNullOrEmpty(Car.ImagePath))
            {
                <div class="image-container">
                    @if (!IsEditable)
                    {
                        <img src="@Car.ImagePath" class="w-100 h-100 object-fit-cover" alt="Main Car Image" @onclick="() => ShowImageModal(Car.ImagePath)"/>
                    }
                    else
                    {
                        <img src="@Car.ImagePath" class="w-100 h-100 object-fit-cover" alt="Main Car Image"/>
                        
                        <div class="overlay d-flex flex-column">
                            <img src="assets/Icons/add-image-icon.svg" alt="Add Image Icon" height="80" width="80"/>
                            <span class="overlay-text">Click to change image</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center p-5">
                    <i class="bi bi-image display-4 text-muted"></i>
                    <p class="text-muted mt-2">No image available</p>
                </div>
            }
        </div>
        
        <div class="card-footer">
            @if (Car.SubImages?.Any() == true)
            {
                @for (var i = 0; i < Car.SubImages.Count; i++)
                {
                    var imageIndex = i; // Capture for closure
                    <div class="sub-image-container position-relative">
                        <div class="sub-image-box rounded-2 shadow-sm" @onclick="() => ShowImageModal(Car.SubImages[imageIndex])">
                            <img src="@Car.SubImages[imageIndex]" alt="sub image" class="sub-image-box-image rounded-2"/>
                        </div>
                        @if (IsEditable)
                        {
                            <button class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1" 
                                    style="border-radius: 50%; width: 25px; height: 25px; padding: 0;"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => RemoveUploadedImage(imageIndex)">
                                ×
                            </button>
                        }
                    </div>
                }
            }

            @if (TemporaryFiles?.Any() == true)
            {
                @for (var i = 0; i < TemporaryFiles.Count; i++)
                {
                    var imageIndex = i; // Capture for closure
                    <div class="sub-image-container position-relative temp-image">
                        <div class="sub-image-box rounded-2 shadow-sm" @onclick="() => ShowImageModal(TemporaryFiles[imageIndex].DataUrl)">
                            <img src="@TemporaryFiles[imageIndex].DataUrl" alt="sub image" class="sub-image-box-image rounded-2"/>
                        </div>
                        @if (IsEditable)
                        {
                            <button class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1"
                                    style="border-radius: 50%; width: 25px; height: 25px; padding: 0;"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => RemoveTemporaryImage(imageIndex)">
                                ×
                            </button>
                        }
                    </div>
                }
            }

            @if (IsEditable)
            {
                <label class="sub-image-box rounded-2 shadow-sm d-flex flex-wrap justify-content-center"
                       style="cursor: pointer;">
                    <img src="assets/Icons/add-image-icon.svg" alt="Add Image Icon" height="40" width="40"/>
                    <span class="text-muted">Add Image</span>
                    <InputFile OnChange="OnFilesSelected"
                               multiple
                               accept="image/*"
                               style="display: none;"/>
                </label>
            }
            
        </div>
        
        @if (_containsUnuploaded || _isUploading)
        {
            <div class="d-flex justify-content-center m-2">
                <button class="btn btn-success text-white" @onclick="UploadTemporaryImages" disabled="@_isUploading">
                    @if (_isUploading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <text>Confirm</text>
                    }
                </button>
            </div>

            @if (_isUploading)
            {
                <div class="d-flex justify-content-center m-2">
                    <div class="progress" style="width: 200px; height: 8px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" 
                             role="progressbar" 
                             style="width: 100%">
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Bootstrap Modal for Full Image -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content bg-transparent border-0">
            <div class="modal-body text-center p-0 position-relative">
                @if (!string.IsNullOrEmpty(_selectedImage))
                {
                    <div class="position-relative d-inline-block">
                        <img src="@_selectedImage" class="img-fluid rounded" alt="Full size image" style="max-height: 90vh; max-width: 100%;" />
                        
                        <!-- Close button overlaid on image -->
                        <button type="button" 
                                class="custom-close-btn position-absolute" 
                                data-bs-dismiss="modal" 
                                aria-label="Close">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    
                    <!-- Navigation arrows (if you're using them) -->
                    @if (Car.SubImages?.Count > 1)
                    {
                        <button class="btn btn-outline-light position-absolute start-0 top-50 translate-middle-y ms-3"
                                @onclick="PreviousImage"
                                disabled="@(_currentImageIndex == 0)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        
                        <button class="btn btn-outline-light position-absolute end-0 top-50 translate-middle-y me-3"
                                @onclick="NextImage"
                                disabled="@(_currentImageIndex == Car.SubImages.Count - 1)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this image?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" data-bs-dismiss="modal">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public required Car Car { get; set; }
    [Parameter] public bool IsEditable { get; set; }

    private List<TempImage> TemporaryFiles { get; set; } = new();
    
    private bool _containsUnuploaded;
    private string? _selectedImage;
    private int _currentImageIndex = 0;
    private int _imageToDeleteIndex = -1;

    private bool _isUploading;
    
    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
    
        // Initialize SubImages list if it's null
        Car.SubImages ??= [];
    
        foreach (var file in files)
        {
            if (file.ContentType.StartsWith("image/"))
            {
                try
                {
                    // Read file content and convert to data URL
                    var maxFileSize = 10 * 1024 * 1024; // 10MB limit
                    using var stream = file.OpenReadStream(maxFileSize);
                    using var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                
                    var fileBytes = memoryStream.ToArray();
                    var base64String = Convert.ToBase64String(fileBytes);
                    var dataUrl = $"data:{file.ContentType};base64,{base64String}";
                
                    // Add to SubImages list for immediate display
                    var tempImage = new TempImage(imageDataUrl: dataUrl, imageFile: file);
                    TemporaryFiles.Add(tempImage);
                    
                    _containsUnuploaded = true;
                }
                catch (Exception ex)
                {
                    // Handle error (file too large, etc.)
                    Console.WriteLine($@"Error processing file {file.Name}: {ex.Message}");
                    // You might want to show a toast notification or error message to user
                }
            }
        }
    
        // Refresh the UI to show new images
        StateHasChanged();
    }

    private async Task UploadTemporaryImages()
    {
        if (!TemporaryFiles.Any()) return;

        _isUploading = true;
        StateHasChanged();

        try
        {
            var filesToUpload = TemporaryFiles.Select(t => t.File);

            var uploadedUrls = await ImageUploadService.UploadImagesAsync(filesToUpload);

            Car.SubImages ??= [];
            Car.SubImages.AddRange(uploadedUrls);

            if (Car.Id != null) await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);

            // Clear temp images
            TemporaryFiles.Clear();
            _containsUnuploaded = false;

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($@"Error uploading images: {e.Message}");
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }
    
    private void RemoveTemporaryImage(int index)
    {
        if (index >= 0 && index < TemporaryFiles.Count)
        {
            TemporaryFiles.RemoveAt(index);
            
            if (TemporaryFiles.Count == 0)
            {
                _containsUnuploaded = false;
            }
            
            StateHasChanged();
        }
    }
    
    private async Task RemoveUploadedImage(int index)
    {
        _imageToDeleteIndex = index;
        await JsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show()");
    }

    private async Task ConfirmDelete()
    {
        if (_imageToDeleteIndex >= 0 && Car.SubImages != null && _imageToDeleteIndex < Car.SubImages.Count)
        {
            var imageUrl = Car.SubImages[_imageToDeleteIndex];
        
            // Delete from Cloudinary
            var deleted = await ImageUploadService.DeleteImageAsync(imageUrl);
        
            if (deleted)
            {
                Car.SubImages.RemoveAt(_imageToDeleteIndex);
            
                if (Car.Id != null)
                {
                    await CarService.UpdateCarAsync(carId: Car.Id, updatedCar: Car);
                }
            
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Failed to delete image from Cloudinary");
            }
        }
    
        _imageToDeleteIndex = -1; // Reset
    }

    private async Task ShowImageModal(string imageUrl)
    {
        _selectedImage = imageUrl;

        // Show the modal using Bootstrap's JavaScript API
        await JsRuntime.InvokeVoidAsync("eval",
            "new bootstrap.Modal(document.getElementById('imageModal')).show()");
    }
    
    private void NextImage()
    {
        if (Car.SubImages?.Any() == true && _currentImageIndex < Car.SubImages.Count - 1)
        {
            _currentImageIndex++;
            _selectedImage = Car.SubImages[_currentImageIndex];
            
            Console.WriteLine(_selectedImage);
        }
    }

    private void PreviousImage()
    {
        if (Car.SubImages?.Any() == true && _currentImageIndex > 0)
        {
            _currentImageIndex--;
            _selectedImage = Car.SubImages[_currentImageIndex];
            
            Console.WriteLine(_selectedImage);
        }
    }
}