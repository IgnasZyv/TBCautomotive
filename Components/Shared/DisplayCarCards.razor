@rendermode InteractiveServer

@using CarHostingWeb.Models
@using CarHostingWeb.Services

@inject CarService CarService;
@inject LocalizationService Localization
@inject NavigationManager Navigation

<div class="container-fluid px-4 mt-4">
    @if (Cars != null)
    {
        <div class="row g-4 justify-content-center">
            @foreach (var car in Cars)
            {
                <div class="col-sm-6 col-md-5 col-lg-4">
                    <div class="card h-100 border-0 shadow-sm card-hover">
                        <div style="height: 220px; overflow: hidden;">
                            <img src="@car.ImagePath" class="card-img-top" alt="@car.Make @car.Model"
                                 style="object-fit: cover; height: 100%; width: 100%;">
                        </div>
                        <div class="card-body p-4">
                            <h5 class="card-title fw-bold mb-3">@car.Make @car.Model</h5>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarYear"):</span>
                                <span class="fw-medium">@car.Year</span>
                            </div>
                            
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarKm"):</span>
                                <span class="fw-medium">@car.Kilometres miles</span>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarFuelType"):</span>
                                <span class="fw-medium">@Localization.GetLocalizedFuelType(car.FuelType)</span>
                            </div>

                            <hr class="my-3">

                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fs-4 fw-bold text-success">$@car.Price.ToString("N1")</span>
                                @switch (_currentPath)
                                {
                                    case "":
                                        <a href="/car/@car.Id" class="btn btn-primary">@Localization.GetString("CarCardDetailButton")</a>
                                        break;
                                    case "admin":
                                        <a href="/admin/edit/@car.Id" class="btn btn-primary">@Localization.GetString("CarCardEditButton")</a>
                                        break;
                                }

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="h5">Loading cars...</p>
        </div>
    }
</div>


@code {
    [Parameter] public List<Car>? Cars { get; set; }
    private string _currentPath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Cars = await CarService.GetAllCarsAsync();
        
        _currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
    }
}
