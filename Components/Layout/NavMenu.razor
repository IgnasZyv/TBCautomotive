@rendermode InteractiveServer
@using System.Security.Claims
@using CarHostingWeb.Services
@using CarHostingWeb.Services.Authentication
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FirebaseAuthService FirebaseAuthService
@inject LocalizationService Localization

<div class="top-navbar">
    <div class="top-row ps-3 navbar navbar-dark rounded-3 border-bottom shadow-sm bg-white mx-4">
        <div class="container-fluid">
            <div class="d-flex flex-row">
                <a class="" href="">
                    <img class="" src="assets/Logo/Logo Letters.png" alt="TCBautomotive logo" width="140" height="30"/>
                    @* <a class="navbar-brand" href="">TCBautomotive</a> *@
                </a>
            </div>
            

            <button @onclick="ToggleMenu" class="navbar-toggler" aria-expanded="@_isMenuExpanded" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="nav-scrollable @(_isMenuExpanded ? "show w-100" : "")">
                <nav class="nav @(_isMenuExpanded ? "flex-column" : "")">
                    <CascadingAuthenticationState>
                        <AuthorizeView>
                            <Authorized>
                                <div class="nav-item px-3 d-flex justify-content-center">
                                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                                        <i class="bi bi-house text-primary fs-5 p-2"></i> Home
                                    </NavLink>
                                </div>

                                <div class="nav-item px-3">
                                    <NavLink class="nav-link" href="/admin" Match="NavLinkMatch.Prefix">
                                        <i class="bi bi-shield-lock text-primary fs-5 p-2"></i> Admin Panel
                                    </NavLink>
                                </div>

                                <div class="nav-item px-3">
                                    <button class="nav-link" @onclick="HandleLogout">
                                        <i class="bi bi-box-arrow-right text-primary fs-5 p-2"></i> @Localization.GetString("SignOut")
                                    </button>
                                </div>
                            </Authorized>


                            <NotAuthorized>
                                <div class="nav-item px-3">
                                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                                        <i class="bi bi-house text-primary fs-5 p-2"></i> Home
                                    </NavLink>
                                </div>

                                <div class="nav-item px-3">
                                    <NavLink class="nav-link" href="login">
                                        <i class="bi bi-box-arrow-in-left text-primary fs-5 p-2"></i> @Localization.GetString("LogIn")
                                    </NavLink>
                                </div>



                            </NotAuthorized>

                        </AuthorizeView>
                    </CascadingAuthenticationState>





                    @* <button @onclick="@(() => ChangeCulture("en"))"> *@
                    @*     <img src="assets/flags/us-flag.svg" alt="English" width="24" /> *@
                    @* </button> *@
                    @* <button @onclick="@(() => ChangeCulture("es"))"> *@
                    @*     <img src="assets/flags/es-flag.svg" alt="Español" width="24" /> *@
                    @* </button> *@

                    <CultureSelector/>

                </nav>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isMenuExpanded = false;
    private AuthenticationState? _authState;
    private ClaimsPrincipal? _user;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = _authState.User;
    }
    
    private bool IsAuthenticated => _user?.Identity?.IsAuthenticated ?? false;
    
    private bool IsAdmin =>
        _user?.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "admin") ?? false;
    
    private void ToggleMenu()
    {
        _isMenuExpanded = !_isMenuExpanded;
    }

    
    private void HandleLogout()
    {
        try
        {
            FirebaseAuthService?.SignOut();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            // Still navigate away even if logout fails
            NavigationManager.NavigateTo("/");
        }
    }

    private void ChangeCulture(string cultureCode)
    {
        var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (string.IsNullOrWhiteSpace(returnUrl))
        {
            returnUrl = "/";
        }
        else
        {
            returnUrl = "/" + returnUrl; // Ensure leading slash
        }

        NavigationManager.NavigateTo($"Culture/Set?culture={cultureCode}&redirectUri={Uri.EscapeDataString(returnUrl)}", forceLoad: true);
    }

}