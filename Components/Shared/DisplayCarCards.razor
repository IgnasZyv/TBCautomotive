@* @rendermode InteractiveServer *@

@using System.ComponentModel.DataAnnotations
@using CarHostingWeb.Models
@using CarHostingWeb.Services

@inject CarService CarService;
@inject LocalizationService Localization
@inject NavigationManager Navigation

<div class="container-fluid px-4 mt-4">
    @if (Cars != null)
    {
        <div class="row g-4 justify-content-center">
            @foreach (var car in Cars)
            {
                <div class="col-sm-6 col-md-5 col-lg-4">
                    <div class="card h-100 border-0 shadow-sm card-hover">
                        <div style="height: 220px; overflow: hidden;">
                            @if (!string.IsNullOrEmpty(car.ImagePath))
                            {
                                <img src="@car.ImagePath" class="card-img-top" alt="@car.Make @car.Model"
                                     style="object-fit: cover; height: 100%; width: 100%;">
                            }
                            else
                            {
                                <div class="d-flex flex-column justify-content-center align-items-center h-100">
                                    <img src="assets/Icons/no image found icon.svg" alt="No image found icon" height="60" width="60"/>
                                    <p>Image not found</p>
                                </div>
                            }
                            
                        </div>
                        <div class="card-body p-4">
                            <h5 class="card-title fw-bold mb-3">@car.Make @car.Model</h5>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarYear"):</span>
                                <span class="fw-medium">@car.Year</span>
                            </div>
                            
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarKm"):</span>
                                <span class="fw-medium">@car.Kilometres km</span>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">@Localization.GetString("CarFuelType"):</span>
                                <span class="fw-medium">@Localization.GetLocalizedFuelType(car.FuelType)</span>
                            </div>

                            <hr class="my-3">

                            <div class="d-flex justify-content-between align-items-center">
                                @if (car.IsSold)
                                {
                                    <span class="fs-4 fw-bold text-danger">@Localization.GetString("CarSold")</span>
                                }
                                else if (car.IsReserved)
                                {
                                    <span class="fs-4 fw-bold text-warning">@Localization.GetString("CarReserved")</span>
                                }
                                else
                                {
                                    <span class="fs-4 fw-bold text-success">â‚¬@car.Price.ToString("N0")</span>
                                }
                                
                                @switch (_currentPath)
                                {
                                    case "":
                                        <a href="/car/@car.Id" class="btn btn-primary">@Localization.GetString("CarCardDetailButton")</a>
                                        break;
                                    case "admin":
                                        <a href="/admin/edit/@car.Id" class="btn btn-primary">@Localization.GetString("CarCardEditButton")</a>
                                        break;
                                }

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            @* <div class="spinner-border text-primary mb-3" role="status"> *@
            @*     <span class="visually-hidden">Loading...</span> *@
            @* </div> *@
            @* <p class="h5">Loading cars...</p> *@
            @* <p></p> *@
            
            <p>No cars at this moment!</p>
        </div>
    }
</div>


@code {
    [Parameter] public List<Car>? Cars { get; set; }
    private string _currentPath = string.Empty;

    protected override void OnInitialized()
    {
        _currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
    }

    // protected override Task OnInitializedAsync()
    // {
        // var allCars = await CarService.GetAllCarsAsync();
        //
        // // Sort cars: Available first, then Reserved, then Sold at the bottom
        // Cars = allCars?.OrderBy(car => car.IsSold ? 2 : (car.IsReserved ? 1 : 0))
        //     .ThenByDescending(car => car.CreatedAt) // Most recent first within each group
        //     .ToList();
    
    //     _currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
    // }
}
